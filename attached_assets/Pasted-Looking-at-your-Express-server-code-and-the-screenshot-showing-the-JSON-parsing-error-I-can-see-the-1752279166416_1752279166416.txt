Looking at your Express server code and the screenshot showing the JSON parsing error, I can see the issue is still occurring despite your improved GLEIF extractor code. The problem is in how your **server endpoints are handling the GLEIF API responses**.

## Root Cause Analysis

The error **"Unexpected token ' {
  try {
    const { domain, searchTerm, leiCode } = req.body;

    if (!domain && !searchTerm && !leiCode) {
      return res.status(400).json({
        success: false,
        error: 'Either domain, searchTerm, or leiCode is required'
      });
    }

    const queryTerm = searchTerm || domain || leiCode;
    console.log(`[Beta] [GLEIF-RAW-COMPLETE] Complete raw extraction for: ${queryTerm}`);

    // Enhanced error handling with specific HTML error detection
    const rawResult = await gleifExtractor.extractRawGleifData(queryTerm);

    // Check if the result indicates an HTML error
    if (!rawResult.success && rawResult.error) {
      console.error(`[Beta] [GLEIF-RAW-COMPLETE] GLEIF API Error:`, rawResult.error);
      
      // Determine error type
      const isHtmlError = rawResult.error.includes('HTML') || 
                         rawResult.error.includes('DOCTYPE') ||
                         rawResult.error.includes('invalid response format');
      
      return res.status(502).json({
        success: false,
        domain: domain || queryTerm,
        method: 'gleif_raw_complete_api',
        processingTime: rawResult.processingTime,
        error: isHtmlError ? 'GLEIF API returned invalid HTML response instead of JSON' : rawResult.error,
        errorCode: isHtmlError ? 'API_HTML_ERROR' : 'API_ERROR',
        extractionMethod: 'gleif_complete_raw_json',
        rawApiResponse: null,
        fullGleifResponse: null,
        completeRawData: null,
        unprocessedEntities: null,
        httpHeaders: null,
        metaData: null,
        totalRecords: 0,
        entityCount: 0,
        technicalDetails: {
          apiUrl: 'https://api.gleif.org/api/v1',
          errorType: isHtmlError ? 'HTML_RESPONSE' : 'API_ERROR',
          troubleshooting: isHtmlError ? 
            'GLEIF API returned HTML error page instead of JSON. Try simplifying search term.' : 
            'General API error occurred.'
        }
      });
    }

    console.log(`[Beta] [GLEIF-RAW-COMPLETE] Raw result:`, {
      success: rawResult.success,
      entityCount: rawResult.totalRecords || 0,
      processingTime: rawResult.processingTime,
      responseSize: rawResult.responseSize,
      hasMetaData: !!rawResult.metaData,
      hasLinks: !!rawResult.includesLinks,
      gleifApiVersion: rawResult.gleifApiVersion
    });

    // Return successful response
    res.json({
      success: rawResult.success,
      domain: domain || queryTerm,
      method: 'gleif_raw_complete_api',
      processingTime: rawResult.processingTime,
      error: null,
      errorCode: null,
      extractionMethod: 'gleif_complete_raw_json',
      rawApiResponse: rawResult.rawApiResponse,
      fullGleifResponse: rawResult.fullGleifResponse,
      completeRawData: rawResult.completeRawData,
      unprocessedEntities: rawResult.unprocessedEntities,
      httpHeaders: rawResult.httpHeaders,
      metaData: rawResult.metaData,
      paginationInfo: rawResult.paginationInfo,
      includesLinks: rawResult.includesLinks,
      requestDetails: rawResult.requestDetails,
      totalRecords: rawResult.totalRecords || 0,
      entityCount: rawResult.totalRecords || 0,
      gleifApiVersion: rawResult.gleifApiVersion,
      responseSize: rawResult.responseSize,
      technicalDetails: {
        apiUrl: 'https://api.gleif.org/api/v1',
        searchType: rawResult.requestDetails?.fuzzySearch ? 'fuzzy' : 'exact',
        responseSize: rawResult.responseSize,
        gleifApiVersion: rawResult.gleifApiVersion,
        captureMethod: 'complete_passthrough',
        dataIntegrity: 'unmodified',
        includedSections: {
          data: !!rawResult.rawApiResponse?.data,
          meta: !!rawResult.metaData,
          links: !!rawResult.includesLinks,
          included: !!rawResult.rawApiResponse?.included,
          httpHeaders: !!rawResult.httpHeaders
        }
      }
    });

  } catch (error: any) {
    console.error(`[Beta] [GLEIF-RAW-COMPLETE] Unexpected Error:`, error.message);
    console.error(`[Beta] [GLEIF-RAW-COMPLETE] Error stack:`, error.stack);

    // Enhanced error categorization
    const isHtmlError = error.message.includes('HTML') || 
                       error.message.includes('DOCTYPE') ||
                       error.message.includes('Unexpected token');
    
    const isNetworkError = error.message.includes('ENOTFOUND') ||
                          error.message.includes('ECONNREFUSED') ||
                          error.message.includes('timeout');

    res.status(500).json({
      success: false,
      domain: req.body.domain || 'N/A',
      method: 'gleif_raw_complete_api',
      processingTime: 0,
      error: isHtmlError ? 'GLEIF API returned HTML instead of JSON - API may be temporarily unavailable' :
             isNetworkError ? 'Network error connecting to GLEIF API' :
             error.message,
      errorCode: isHtmlError ? 'HTML_PARSE_ERROR' : 
                isNetworkError ? 'NETWORK_ERROR' : 'UNKNOWN_ERROR',
      extractionMethod: null,
      rawApiResponse: null,
      fullGleifResponse: null,
      completeRawData: null,
      unprocessedEntities: null,
      httpHeaders: null,
      metaData: null,
      totalRecords: 0,
      entityCount: 0,
      technicalDetails: {
        errorType: isHtmlError ? 'HTML_RESPONSE' : isNetworkError ? 'NETWORK' : 'UNKNOWN',
        troubleshooting: isHtmlError ? 
          'Try: 1) Use simpler search terms, 2) Check GLEIF API status, 3) Retry in a few minutes' :
          isNetworkError ?
          'Check internet connection and GLEIF API availability' :
          'Unexpected error occurred'
      }
    });
  }
});
```

### **2. Add GLEIF API Status Check Endpoint**

Add this endpoint to help debug API connectivity:

```typescript
// GLEIF API status and debugging endpoint
app.get('/api/beta/gleif-debug', async (req, res) => {
  try {
    console.log('[Beta] [GLEIF-DEBUG] Starting comprehensive GLEIF API debug...');
    
    // Test basic connection
    const connectionTest = await gleifExtractor.testGLEIFConnection();
    
    // Test with a known working entity
    let appleTest = null;
    try {
      appleTest = await gleifExtractor.extractRawGleifData('apple');
    } catch (error: any) {
      appleTest = { success: false, error: error.message };
    }
    
    res.json({
      success: true,
      timestamp: new Date().toISOString(),
      tests: {
        basicConnection: {
          success: connectionTest,
          description: 'Basic GLEIF API connectivity test'
        },
        appleSearch: {
          success: appleTest?.success || false,
          error: appleTest?.error || null,
          entityCount: appleTest?.totalRecords || 0,
          description: 'Test search for "apple" - should find Apple Inc.'
        }
      },
      gleifApiInfo: {
        baseUrl: 'https://api.gleif.org/api/v1',
        documentation: 'https://documenter.getpostman.com/view/7679680/SVYrrxuU',
        status: connectionTest ? 'Available' : 'Unavailable'
      },
      troubleshooting: {
        htmlErrors: 'If getting HTML errors, try simpler search terms',
        networkErrors: 'Check internet connection and firewall settings',
        noResults: 'Try partial company names (e.g., "apple" instead of "apple inc")'
      }
    });
    
  } catch (error: any) {
    console.error('[Beta] [GLEIF-DEBUG] Debug test failed:', error.message);
    res.status(500).json({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});
```

### **3. Update Frontend Error Handling**

Your frontend should also handle these specific error types. Make sure your frontend code checks for the `errorCode` field:

```typescript
// In your frontend code
if (response.errorCode === 'HTML_PARSE_ERROR' || response.errorCode === 'API_HTML_ERROR') {
  // Show specific message about GLEIF API returning HTML
  console.error('GLEIF API returned HTML instead of JSON - API may be temporarily down');
} else if (response.errorCode === 'NETWORK_ERROR') {
  // Show network connectivity message
  console.error('Network error connecting to GLEIF API');
}
```

## Testing Steps

1. **Test the debug endpoint first**:
   ```bash
   GET http://localhost:3001/api/beta/gleif-debug
   ```

2. **Test with "apple" specifically**:
   ```bash
   POST http://localhost:3001/api/beta/gleif-raw
   {
     "searchTerm": "apple"
   }
   ```

3. **Check server logs** for the detailed error messages and categorization

## Expected Outcome

With these changes:
- **HTML errors will be properly caught** and returned as structured JSON responses
- **Frontend will receive proper error codes** instead of trying to parse HTML as JSON
- **Debugging information** will help identify whether the issue is with GLEIF API availability or search terms
- **Error messages will be more actionable** for users

The core issue is that your server needs to **translate the GLEIF extractor errors into proper JSON responses** rather than letting HTML responses bubble up to the frontend.

[1] https://pplx-res.cloudinary.com/image/private/user_uploads/124996/13ec86af-ec2a-4fcb-8d9e-de90a9be42bd/Screenshot-2025-07-12-at-5.40.31-AM.jpg